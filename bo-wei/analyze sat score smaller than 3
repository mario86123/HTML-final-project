{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"analyze sat score smaller than 3","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 執行順序：new data -> outer with encoding -> x_test -> Decision tree"],"metadata":{"id":"epU6K0nwo4fs"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn import metrics"],"metadata":{"id":"BL-BJEjshwL6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BOGEbaM3k6mx","executionInfo":{"status":"ok","timestamp":1641953415261,"user_tz":-480,"elapsed":23729,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"b60ddac1-fadc-4acf-c16a-7139a79ae3d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["data = pd.read_csv('/content/drive/MyDrive/HTML final project/new_data.csv')\n","Train_IDs = pd.read_csv('/content/drive/MyDrive/HTML final project/Train_IDs.csv')\n","Test_IDs = pd.read_csv('/content/drive/MyDrive/HTML final project/Test_IDs.csv')"],"metadata":{"id":"ON13xxlBNyVu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# drop useless columns do not get better performance"],"metadata":{"id":"6F8IQqqaQOOw"}},{"cell_type":"code","source":["training_data = pd.merge(data, Train_IDs, on=[\"Customer ID\"])\n","\n","training_data = training_data[training_data['Satisfaction Score'] < 3] # Satisfaction Score < 3\n","print(training_data['Churn Category'].value_counts())\n","\n","x_train = training_data.iloc[:, 2:-1]\n","\n","x_train = x_train.fillna(x_train.median())\n","x_train = x_train.to_numpy()\n","\n","y_train = training_data['Churn Category'].to_numpy()\n","\n","print(\"x_train.shape: \", x_train.shape)\n","print(\"y_train.shape: \", y_train.shape)\n","\n","y_train = y_train.astype('int')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Rpb8-N0lI_Y","executionInfo":{"status":"ok","timestamp":1641953418054,"user_tz":-480,"elapsed":309,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"9443d8b9-4796-425f-f7ac-7f6b10b9c036"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1    171\n","3     74\n","2     59\n","4     37\n","5     33\n","Name: Churn Category, dtype: int64\n","x_train.shape:  (374, 44)\n","y_train.shape:  (374,)\n"]}]},{"cell_type":"markdown","source":["# Satisfaction Score < 3 用 Churn Category 分 Satisfaction Score 平均值 和 中位數"],"metadata":{"id":"a2tPpzC8RHgU"}},{"cell_type":"code","source":["status = ['No Churn', 'Competitor', 'Dissatisfaction', 'Attitude', 'Price', 'Other']\n","for i in range(6):\n","  print()\n","  print(status[i])\n","  print('sat score:')\n","  print('mean: ', training_data[training_data['Churn Category'] == i]['Satisfaction Score'].mean())\n","  print('median: ', training_data[training_data['Churn Category'] == i]['Satisfaction Score'].median())\n","  print('-----------------')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"meHcNA7fROUI","executionInfo":{"status":"ok","timestamp":1641953531693,"user_tz":-480,"elapsed":286,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"bc2ee1f3-7580-44f8-aacb-4bfeb664e342"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","No Churn\n","sat score:\n","mean:  nan\n","median:  nan\n","-----------------\n","\n","Competitor\n","sat score:\n","mean:  1.2573099415204678\n","median:  1.0\n","-----------------\n","\n","Dissatisfaction\n","sat score:\n","mean:  1.3559322033898304\n","median:  1.0\n","-----------------\n","\n","Attitude\n","sat score:\n","mean:  1.6081081081081081\n","median:  2.0\n","-----------------\n","\n","Price\n","sat score:\n","mean:  1.4054054054054055\n","median:  1.0\n","-----------------\n","\n","Other\n","sat score:\n","mean:  1.696969696969697\n","median:  2.0\n","-----------------\n"]}]},{"cell_type":"markdown","source":["# x_test"],"metadata":{"id":"JmCq0EduRv7o"}},{"cell_type":"code","source":["x_test = pd.read_csv('/content/drive/MyDrive/HTML final project/x_test.csv')\n","x_test = x_test[x_test['Satisfaction Score'] < 3] # Satisfaction Score < 3\n","x_test = x_test.fillna(x_test.median())\n","x_test = x_test.to_numpy()\n","\n","print(\"x_test.shape: \", x_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MO-rL03qgZKL","executionInfo":{"status":"ok","timestamp":1641958924376,"user_tz":-480,"elapsed":768,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"5becbfc6-3cba-4125-dd46-e8675c8dbd7f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x_test.shape:  (239, 44)\n"]}]},{"cell_type":"markdown","source":["# feature selection"],"metadata":{"id":"BFAeGXofR05k"}},{"cell_type":"code","source":["from sklearn.feature_selection import SelectKBest\n","from sklearn.feature_selection import mutual_info_classif\n","from sklearn.feature_selection import f_classif\n","from matplotlib import pyplot\n","\n","# feature selection\n","def select_features(X_train, y_train, X_test):\n","\tfs = SelectKBest(score_func=f_classif, k=5)\n","\tfs.fit(X_train, y_train)\n","\tX_train_fs = fs.transform(X_train)\n","\tX_test_fs = fs.transform(X_test)\n","\treturn X_train_fs, X_test_fs, fs\n","\n","status = ['No Churn', 'Competitor', 'Dissatisfaction', 'Attitude', 'Price', 'Other']\n","\n","x_train_fs, x_test_fs, fs = select_features(x_train, y_train, x_test)\n","# what are scores for the features\n","# for i in range(len(fs.scores_)):\n","# \tprint('Feature %d: %f' % (i, fs.scores_[i]))\n","# plot the scores\n","pyplot.bar([i for i in range(len(fs.scores_))], fs.scores_)\n","pyplot.show()\n","cols = fs.get_support(indices=True)\n","print(data.columns[cols+2])\n","\n","for i in range(6):\n","  print()\n","  print(status[i])\n","  y_train_i = np.where(y_train == i, 1, -1)\n","  x_train_fs, x_test_fs, fs = select_features(x_train, y_train_i, x_test)\n","  # what are scores for the features\n","  # for i in range(len(fs.scores_)):\n","  # \tprint('Feature %d: %f' % (i, fs.scores_[i]))\n","  # plot the scores\n","  pyplot.bar([i for i in range(len(fs.scores_))], fs.scores_)\n","  pyplot.show()\n","  cols = fs.get_support(indices=True)\n","  print(data.columns[cols+2])\n","# features_df_new = features_df.iloc[:,cols]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"wyYEcFItHx9N","executionInfo":{"status":"ok","timestamp":1641958928051,"user_tz":-480,"elapsed":2142,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"55798e47-d260-4b0d-8224-fcafedad3aa3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [ 0  8  9 15] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n","  f = msb / msw\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['City', 'Latitude', 'Longitude', 'Internet Service',\n","       'Satisfaction Score'],\n","      dtype='object')\n","\n","No Churn\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:108: RuntimeWarning: invalid value encountered in true_divide\n","  msb = ssbn / float(dfbn)\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['Total Refunds', 'Total Extra Data Charges',\n","       'Total Long Distance Charges', 'Total Revenue', 'Satisfaction Score'],\n","      dtype='object')\n","\n","Competitor\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [ 0  8  9 15] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n","  f = msb / msw\n"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAMSUlEQVR4nO3dX4il9X3H8fcnakmpLdE6LIvaTppKghfNWgZrMRSbNGWjoRoIodLIXlg2FwoKlrL1JmmgYKHR9KIENlHcC2sr1VRpQlvZCjZQbGaNjX+WYBqUKuvuiA3am5TVby/m2TqZzMmcmTkzZ7573i8Y5jy/88yen7/dee/jM89zNlWFJKmf90x7ApKkzTHgktSUAZekpgy4JDVlwCWpqXN38sUuuuiimp+f38mXlKT2jh079npVza0e39GAz8/Ps7i4uJMvKUntJXl5rXFPoUhSUwZckpoy4JLUlAGXpKYMuCQ1ZcAlqSkDLklNGXBJasqAS1JTO3onpiSd7eYPfWPN8Zfuum7ir+URuCQ1ZcAlqSkDLklNGXBJasqAS1JTBlySmjLgktSUAZekpgy4JDVlwCWpqXUDnuTSJE8keSHJ80luG8a/kOTVJM8MH9du/3QlSWeM814op4E7qurpJD8PHEvy+PDcPVX1F9s3PUnSKOsGvKpOACeGx28lOQ5cvN0TkyT9dBs6B55kHrgCeGoYujXJd5Pcl+SCEV9zMMliksWlpaUtTVaS9K6xA57kfOBh4PaqehP4CvABYB/LR+hfWuvrqupwVS1U1cLc3NwEpixJgjEDnuQ8luP9QFU9AlBVJ6vq7ap6B/gqcOX2TVOStNo4V6EEuBc4XlV3rxjfu2K3TwHPTX56kqRRxrkK5WrgJuDZJM8MY3cCNybZBxTwEvC5bZmhJGlN41yF8i0gazz1zclPR5I0Lu/ElKSmDLgkNWXAJakpAy5JTRlwSWrKgEtSUwZckpoy4JLUlAGXpKYMuCQ1ZcAlqSkDLklNGXBJasqAS1JTBlySmjLgktSUAZekpgy4JDVlwCWpKQMuSU0ZcElqyoBLUlMGXJKaMuCS1JQBl6SmDLgkNWXAJakpAy5JTRlwSWrKgEtSU+sGPMmlSZ5I8kKS55PcNoxfmOTxJC8Ony/Y/ulKks4Y5wj8NHBHVV0OXAXckuRy4BBwtKouA44O25KkHbJuwKvqRFU9PTx+CzgOXAxcDxwZdjsC3LBdk5Qk/aQNnQNPMg9cATwF7KmqE8NTrwF7RnzNwSSLSRaXlpa2MFVJ0kpjBzzJ+cDDwO1V9ebK56qqgFrr66rqcFUtVNXC3NzcliYrSXrXWAFPch7L8X6gqh4Zhk8m2Ts8vxc4tT1TlCStZZyrUALcCxyvqrtXPPUYcGB4fAB4dPLTkySNcu4Y+1wN3AQ8m+SZYexO4C7goSQ3Ay8Dn9meKUqS1rJuwKvqW0BGPP2xyU5HkjQu78SUpKYMuCQ1ZcAlqSkDLklNGXBJasqAS1JTBlySmjLgktSUAZekpgy4JDVlwCWpKQMuSU0ZcElqyoBLUlMGXJKaMuCS1JQBl6SmDLgkNWXAJakpAy5JTRlwSWrKgEtSUwZckpoy4JLUlAGXpKYMuCQ1ZcAlqSkDLklNGXBJamrdgCe5L8mpJM+tGPtCkleTPDN8XLu905QkrTbOEfj9wP41xu+pqn3DxzcnOy1J0nrWDXhVPQm8sQNzkSRtwFbOgd+a5LvDKZYLRu2U5GCSxSSLS0tLW3g5SdJKmw34V4APAPuAE8CXRu1YVYeraqGqFubm5jb5cpKk1TYV8Ko6WVVvV9U7wFeBKyc7LUnSejYV8CR7V2x+Cnhu1L6SpO1x7no7JHkQuAa4KMkrwOeBa5LsAwp4CfjcNs5RkrSGdQNeVTeuMXzvNsxFkrQB3okpSU0ZcElqyoBLUlMGXJKaMuCS1JQBl6SmDLgkNWXAJakpAy5JTRlwSWrKgEtSUwZckpoy4JLUlAGXpKYMuCQ1ZcAlqSkDLklNGXBJasqAS1JTBlySmjLgktSUAZekpgy4JDVlwCWpKQMuSU0ZcElqyoBLUlMGXJKaMuCS1JQBl6Sm1g14kvuSnEry3IqxC5M8nuTF4fMF2ztNSdJq4xyB3w/sXzV2CDhaVZcBR4dtSdIOWjfgVfUk8Maq4euBI8PjI8ANE56XJGkdmz0HvqeqTgyPXwP2jNoxycEki0kWl5aWNvlykqTVtvxDzKoqoH7K84eraqGqFubm5rb6cpKkwWYDfjLJXoDh86nJTUmSNI7NBvwx4MDw+ADw6GSmI0ka1ziXET4I/BvwwSSvJLkZuAv4eJIXgd8ZtiVJO+jc9XaoqhtHPPWxCc9FkrQB3okpSU0ZcElqyoBLUlMGXJKaMuCS1JQBl6SmDLgkNWXAJakpAy5JTa17J6Y0q+YPfeMnxl6667opzERam0fgktSUAZekpgy4JDVlwCWpKQMuSU0ZcElqyoBLUlMGXJKaMuCS1JQBl6SmDLgkNWXAJakp38xK0pp8M6/dzyNwSWrKgEtSUwZckpryHLi0S6x1zhk876zRPAKXpKYMuCQ1taVTKEleAt4C3gZOV9XCJCYl6cd5ekVrmcQ58N+uqtcn8OtIkjbAUyiS1NRWA17APyc5luTgWjskOZhkMcni0tLSFl9OknTGVgP+kar6deATwC1Jfmv1DlV1uKoWqmphbm5uiy8nSTpjSwGvqleHz6eArwNXTmJSkqT1bfqHmEl+DnhPVb01PP5d4IsTm5l2hG9YJPW1latQ9gBfT3Lm1/nrqvrHicxKkrSuTQe8qn4AfHiCc5EkbYCXEUpSUwZckpoy4JLUlAGXpKZ8P3BJG+blp7uDR+CS1JRH4E34dqKaZf75X5sBl2aYp0J6M+BnOY9cpLOX58AlqSkDLklNeQpF0szq/jMAj8AlqSkDLklNeQpF0q7gFVMb5xG4JDVlwCWpKQMuSU0ZcElqyoBLUlMGXJKaMuCS1JTXgUsTNuvXM8/6f/9O8ghckpryCHyTur8Jjpb5+6jODPg28H8hJe0ET6FIUlNn/RG4R8OSzlZnfcC1eZ4flnY3Ay5tgn+5aTfYUsCT7Af+EjgH+FpV3TWRWUkb0Ok0Wae5djHLa7rpgCc5B/gr4OPAK8C3kzxWVS9ManLT5lGWOugUsJ2ea6e12YytHIFfCXy/qn4AkORvgOuBHQ/4Vn6TjPTkne3fNJoNHdqQqtrcFyafBvZX1R8O2zcBv1FVt67a7yBwcNj8IPC9MV/iIuD1TU3u7OfajObajObajLbb1+aXq2pu9eC2/xCzqg4Dhzf6dUkWq2phG6bUnmszmmszmmszWte12cqNPK8Cl67YvmQYkyTtgK0E/NvAZUnen+RngN8HHpvMtCRJ69n0KZSqOp3kVuCfWL6M8L6qen5iM9vEaZcZ4tqM5tqM5tqM1nJtNv1DTEnSdPlmVpLUlAGXpKZ2XcCT7E/yvSTfT3Jo2vOZtiT3JTmV5LkVYxcmeTzJi8PnC6Y5x2lJcmmSJ5K8kOT5JLcN4zO/Pknem+Tfk/zHsDZ/Ooy/P8lTw/fX3w4XIMykJOck+U6Sfxi2263Nrgr4itvzPwFcDtyY5PLpzmrq7gf2rxo7BBytqsuAo8P2LDoN3FFVlwNXAbcMf15cH/gR8NGq+jCwD9if5Crgz4F7qupXgf8Gbp7iHKftNuD4iu12a7OrAs6K2/Or6n+BM7fnz6yqehJ4Y9Xw9cCR4fER4IYdndQuUVUnqurp4fFbLH8zXozrQy37n2HzvOGjgI8CfzeMz+TaACS5BLgO+NqwHRquzW4L+MXAf63YfmUY04/bU1UnhsevAXumOZndIMk8cAXwFK4P8P+nCJ4BTgGPA/8J/LCqTg+7zPL315eBPwbeGbZ/kYZrs9sCrg2q5etAZ/pa0CTnAw8Dt1fVmyufm+X1qaq3q2ofy3dJXwl8aMpT2hWSfBI4VVXHpj2Xrdpt/6CDt+eP52SSvVV1Islelo+wZlKS81iO9wNV9cgw7PqsUFU/TPIE8JvA+5KcOxxpzur319XA7yW5Fngv8Ass/7sG7dZmtx2Be3v+eB4DDgyPDwCPTnEuUzOct7wXOF5Vd694aubXJ8lckvcNj3+W5fftPw48AXx62G0m16aq/qSqLqmqeZYb8y9V9Qc0XJtddyfm8Lfil3n39vw/m/KUpirJg8A1LL/d5Ung88DfAw8BvwS8DHymqlb/oPOsl+QjwL8Cz/Luucw7WT4PPtPrk+TXWP5B3DksH6g9VFVfTPIrLF8ccCHwHeCzVfWj6c10upJcA/xRVX2y49rsuoBLksaz206hSJLGZMAlqSkDLklNGXBJasqAS1JTBlySmjLgktTU/wEZOTjAk8gEewAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['Internet Service', 'Online Backup', 'Device Protection Plan',\n","       'Streaming Music', 'Satisfaction Score'],\n","      dtype='object')\n","\n","Dissatisfaction\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [ 0  8  9 15] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n","  f = msb / msw\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['City', 'Zip Code', 'Latitude', 'Longitude', 'Streaming TV'], dtype='object')\n","\n","Attitude\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [ 0  8  9 15] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n","  f = msb / msw\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['Zip Code', 'Internet Service', 'Unlimited Data',\n","       'Total Extra Data Charges', 'Satisfaction Score'],\n","      dtype='object')\n","\n","Price\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [ 0  8  9 15] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n","  f = msb / msw\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['City', 'Avg Monthly Long Distance Charges', 'Internet Service',\n","       'Avg Monthly GB Download', 'Unlimited Data'],\n","      dtype='object')\n","\n","Other\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [ 0  8  9 15] are constant.\n","  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n","  f = msb / msw\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Index(['City', 'Multiple Lines', 'Device Protection Plan', 'Streaming TV',\n","       'Satisfaction Score'],\n","      dtype='object')\n"]}]},{"cell_type":"markdown","source":["\n","# 各式各樣 classifier\n","* LGBM: 0.83\n","* XGB 0.82\n","* 貓貓 classifier 0.81\n","* GDB use x_train median: 0.82758\n","* GDB usw x_test median: 0.82988\n","\n","\n","\n"],"metadata":{"id":"UMK2PzvYp12k"}},{"cell_type":"code","source":["# x_train, x_test, fs = select_features(x_train, y_train_i, x_test)\n","from sklearn.model_selection import train_test_split\n","x_val_train, x_val_test, y_val_train, y_val_test = train_test_split(x_train, y_train, test_size=0.2)\n","y_val_train = np.where(y_val_train == 3, 1, -1)\n","y_val_test_real_label = y_val_test\n","y_val_test = np.where(y_val_test == 3, 1, -1)\n","\n","# !pip install catboost\n","# from catboost import CatBoostClassifier\n","from xgboost.sklearn import XGBClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.svm import SVC\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import BaggingClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","\n","# CAT = CatBoostClassifier\n","MLP = MLPClassifier()\n","NB = GaussianNB()\n","QDA = QuadraticDiscriminantAnalysis()\n","SVCCC = SVC()\n","LR = LogisticRegression()\n","KNN = KNeighborsClassifier()\n","SGD = SGDClassifier()\n","ADA = AdaBoostClassifier()\n","DT = DecisionTreeClassifier()\n","RF = BaggingClassifier(DT)\n","XGB = XGBClassifier()\n","LGBM = LGBMClassifier()\n","GDB = GradientBoostingClassifier()\n","\n","clf_lst = [MLP, NB, QDA, SVCCC, LR, KNN, SGD, ADA, DT, RF, XGB, LGBM, GDB]\n","clf_lst_name = ['MLP', 'NB', 'QDA', 'SVCCC', 'LR', 'KNN', 'SGD', 'ADA', 'DT', 'RF', 'XGB', 'LGBM', 'GDB']\n","# clf_lst = [ADA, DT, XGB, LGBM, GDB]\n","val_acc_lst = []\n","\n","for clf in clf_lst:\n","  val_clf = clf.fit(x_val_train, y_val_train)\n","  # print(f'{clf}: ', clf.feature_importances_)\n","  val_y_predicted = val_clf.predict(x_val_test)\n","  val_acc = metrics.accuracy_score(y_val_test, val_y_predicted)\n","  val_acc_lst.append(val_acc)\n","  print(f'{clf} false: ')\n","  print('truth:     ', y_val_test_real_label[(y_val_test != val_y_predicted)])\n","  print('predicted: ', val_y_predicted[(y_val_test != val_y_predicted)])\n","  print(f'{clf} true: ')\n","  print(y_val_test[(y_val_test == val_y_predicted)])\n","  print()\n","\n","print()\n","print(\"acc:\")\n","for i in range(len(clf_lst)):\n","  print(f'{clf_lst_name[i]:}: {val_acc_lst[i]}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"czh74M4snxRG","executionInfo":{"status":"ok","timestamp":1641908391113,"user_tz":-480,"elapsed":947,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"c6bcae0b-92cb-4526-d656-536eec803f05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MLPClassifier() false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","MLPClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1]\n","\n","GaussianNB() false: \n","truth:      [3 1 3 3 3 3 4 3 1 3 3 3 3 1 3 3 3 5 3 3 3 1 3 3 1 3 3 1]\n","predicted:  [-1  1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1  1 -1 -1 -1  1 -1 -1 -1  1 -1 -1\n","  1 -1 -1  1]\n","GaussianNB() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","\n","QuadraticDiscriminantAnalysis() false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 1 3 3 3 2 4 3 3 3 3 1 1 1]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1  1  1 -1 -1 -1 -1  1  1  1]\n","QuadraticDiscriminantAnalysis() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1 -1 -1\n"," -1 -1 -1]\n","\n","SVC() false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","SVC() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1]\n","\n","LogisticRegression() false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","LogisticRegression() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1]\n","\n","KNeighborsClassifier() false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1]\n","KNeighborsClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1]\n","\n","SGDClassifier() false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","SGDClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1]\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/discriminant_analysis.py:878: UserWarning: Variables are collinear\n","  warnings.warn(\"Variables are collinear\")\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]},{"output_type":"stream","name":"stdout","text":["AdaBoostClassifier() false: \n","truth:      [3 3 3 3 3 4 3 1 3 3 3 3 3 3 3 1 3 5 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1 -1 -1\n"," -1]\n","AdaBoostClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1]\n","\n","DecisionTreeClassifier() false: \n","truth:      [3 1 3 3 3 3 4 3 1 3 1 3 3 3 3 3 3 5 3 1 3 1 3 3 1 1 3 3]\n","predicted:  [-1  1 -1 -1 -1 -1  1 -1  1 -1  1 -1 -1 -1 -1 -1 -1  1 -1  1 -1  1 -1 -1\n","  1  1 -1 -1]\n","DecisionTreeClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1]\n","\n","BaggingClassifier(base_estimator=DecisionTreeClassifier()) false: \n","truth:      [3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1]\n","BaggingClassifier(base_estimator=DecisionTreeClassifier()) true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1]\n","\n","XGBClassifier() false: \n","truth:      [3 3 3 3 3 4 3 3 3 3 3 3 3 3 3 5 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1]\n","XGBClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1]\n","\n","LGBMClassifier() false: \n","truth:      [3 3 3 3 3 4 3 1 3 3 3 3 3 3 1 3 5 3 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1 -1 -1 -1\n"," -1]\n","LGBMClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1]\n","\n","GradientBoostingClassifier() false: \n","truth:      [3 3 3 3 3 4 3 3 3 3 3 3 3 3 3 5 3 3 3 3 3 3 3 3]\n","predicted:  [-1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1]\n","GradientBoostingClassifier() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1]\n","\n","\n","acc:\n","MLP: 0.7066666666666667\n","NB: 0.6266666666666667\n","QDA: 0.68\n","SVCCC: 0.7066666666666667\n","LR: 0.7066666666666667\n","KNN: 0.7066666666666667\n","SGD: 0.7066666666666667\n","ADA: 0.6666666666666666\n","DT: 0.6266666666666667\n","RF: 0.7066666666666667\n","XGB: 0.6933333333333334\n","LGBM: 0.6666666666666666\n","GDB: 0.68\n"]}]},{"cell_type":"code","source":["# change here to predict testing data by best classifier\n","test_clf = GDB.fit(x_train, y_train)\n","test_y_predicted = test_clf.predict(x_test)"],"metadata":{"id":"uIL_GQYdzjI8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Test_IDs[\"Churn Category\"] = test_y_predicted\n","# Test_IDs.to_csv('/content/drive/My Drive/HTML final project/dtreeeee.csv', index=False)"],"metadata":{"id":"9OD3yNtPADGO"},"execution_count":null,"outputs":[]}]}