{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"location","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VFOyTUvlCwj0","executionInfo":{"status":"ok","timestamp":1641910473981,"user_tz":-480,"elapsed":2557,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"4e545020-f5be-42bb-b083-91c18ac5106f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn import metrics"],"metadata":{"id":"j85kRq71C2_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["location = pd.read_csv('/content/drive/MyDrive/HTML final project/location.csv')\n","population = pd.read_csv('/content/drive/MyDrive/HTML final project/population.csv')"],"metadata":{"id":"5HySL-DnC6Yq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# merge location.csv and population.csv\n","location['Population'] = location['Zip Code'].map(population.set_index('Zip Code')['Population'])\n","\n","# fill in NaN because all values are same\n","location.fillna(value = {\"Count\": 1.0, \"Country\": 'United States', \"State\": 'California'}, inplace = True)\n","location['Country'].replace(['United States'], [0.0],inplace = True)\n","location['State'].replace(['California'], [0.0],inplace = True)\n","\n","# ['Acampo', 'Acton', 'Adelanto', ...... , 'Yucca Valley', 'Zenia'] to [0, 1, 2, ......, 1100]\n","location['City'].replace(sorted(location['City'].loc[~location['City'].isnull()].unique()),\n","                         list(range(len(location['City'].loc[~location['City'].isnull()].unique()))), inplace = True)\n","\n","# fill in 'Latitude', 'Longitude' Nan by 'Lat Long'\n","location['Latitude'].fillna(pd.to_numeric(location['Lat Long'].str.split(',').str[0]), inplace=True)\n","location['Longitude'].fillna(pd.to_numeric(location['Lat Long'].str.split(',').str[1]), inplace=True)\n","location.drop(['Lat Long'], axis=1, inplace=True)"],"metadata":{"id":"TUl-Hfg8C-0j"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# fill in all Nan in columns about region"],"metadata":{"id":"3D2-r2sCDGAG"}},{"cell_type":"code","source":["print(location.isna().sum())\n","\n","# fill in City, Latitude, Longitude, Population by zip code\n","filled_in_column_lst = ['City', 'Latitude', 'Longitude', 'Population']\n","for filled_col in filled_in_column_lst:\n","  col_i_unique_val = location['Zip Code'].unique()\n","  col_i_unique_val = col_i_unique_val[~np.isnan(col_i_unique_val)]\n","  for i_val in col_i_unique_val:\n","    if location.loc[location['Zip Code'] == i_val].loc[location[filled_col].notnull()].size != 0:\n","      location.loc[location['Zip Code'] == i_val, filled_col] = location.loc[location['Zip Code'] == i_val].loc[location[filled_col].notnull()].iloc[0][filled_col]\n","\n","print(location.isna().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uese7TS1DFCd","executionInfo":{"status":"ok","timestamp":1641910495821,"user_tz":-480,"elapsed":21362,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"bc5b517a-86a4-4f3d-ea29-a3951509f95e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Customer ID      0\n","Count            0\n","Country          0\n","State            0\n","City           770\n","Zip Code       770\n","Latitude        93\n","Longitude       86\n","Population     770\n","dtype: int64\n","Customer ID      0\n","Count            0\n","Country          0\n","State            0\n","City           131\n","Zip Code       770\n","Latitude         9\n","Longitude        8\n","Population     770\n","dtype: int64\n"]}]},{"cell_type":"code","source":["location.to_csv('/content/drive/MyDrive/HTML final project/location_with_population_and_fill_in_nan.csv', index=False)\n","location"],"metadata":{"id":"7Zv8MnnzDNKB","executionInfo":{"status":"ok","timestamp":1641910495822,"user_tz":-480,"elapsed":41,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"808464a0-e53e-4036-9256-570d3673a471"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-36e22be6-97e2-41ee-860c-7942791dea49\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer ID</th>\n","      <th>Count</th>\n","      <th>Country</th>\n","      <th>State</th>\n","      <th>City</th>\n","      <th>Zip Code</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>Population</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1746-TGTWV</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>550.0</td>\n","      <td>90022.0</td>\n","      <td>34.023810</td>\n","      <td>-118.156582</td>\n","      <td>68701.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2041-JIJCI</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>550.0</td>\n","      <td>NaN</td>\n","      <td>34.108833</td>\n","      <td>-118.229715</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5832-EXGTT</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>445.0</td>\n","      <td>90303.0</td>\n","      <td>33.936291</td>\n","      <td>-118.332639</td>\n","      <td>27778.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8350-NYMVI</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1067.0</td>\n","      <td>90602.0</td>\n","      <td>33.972119</td>\n","      <td>-118.020188</td>\n","      <td>26265.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3458-IDMFK</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>548.0</td>\n","      <td>90720.0</td>\n","      <td>33.794990</td>\n","      <td>-118.065591</td>\n","      <td>21343.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6158</th>\n","      <td>7609-NRNCA</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>511.0</td>\n","      <td>92285.0</td>\n","      <td>34.341737</td>\n","      <td>-116.539416</td>\n","      <td>2182.0</td>\n","    </tr>\n","    <tr>\n","      <th>6159</th>\n","      <td>4835-YSJMR</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>92301.0</td>\n","      <td>34.667815</td>\n","      <td>-117.536183</td>\n","      <td>18980.0</td>\n","    </tr>\n","    <tr>\n","      <th>6160</th>\n","      <td>5067-DGXLL</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>22.0</td>\n","      <td>92304.0</td>\n","      <td>34.559882</td>\n","      <td>-115.637164</td>\n","      <td>42.0</td>\n","    </tr>\n","    <tr>\n","      <th>6161</th>\n","      <td>3129-AAQOU</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>26.0</td>\n","      <td>92305.0</td>\n","      <td>34.167800</td>\n","      <td>-116.864330</td>\n","      <td>301.0</td>\n","    </tr>\n","    <tr>\n","      <th>6162</th>\n","      <td>2205-LPVGL</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>32.0</td>\n","      <td>92308.0</td>\n","      <td>34.424926</td>\n","      <td>-117.184503</td>\n","      <td>28819.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6163 rows × 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36e22be6-97e2-41ee-860c-7942791dea49')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-36e22be6-97e2-41ee-860c-7942791dea49 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-36e22be6-97e2-41ee-860c-7942791dea49');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["     Customer ID  Count  Country  ...   Latitude   Longitude  Population\n","0     1746-TGTWV    1.0      0.0  ...  34.023810 -118.156582     68701.0\n","1     2041-JIJCI    1.0      0.0  ...  34.108833 -118.229715         NaN\n","2     5832-EXGTT    1.0      0.0  ...  33.936291 -118.332639     27778.0\n","3     8350-NYMVI    1.0      0.0  ...  33.972119 -118.020188     26265.0\n","4     3458-IDMFK    1.0      0.0  ...  33.794990 -118.065591     21343.0\n","...          ...    ...      ...  ...        ...         ...         ...\n","6158  7609-NRNCA    1.0      0.0  ...  34.341737 -116.539416      2182.0\n","6159  4835-YSJMR    1.0      0.0  ...  34.667815 -117.536183     18980.0\n","6160  5067-DGXLL    1.0      0.0  ...  34.559882 -115.637164        42.0\n","6161  3129-AAQOU    1.0      0.0  ...  34.167800 -116.864330       301.0\n","6162  2205-LPVGL    1.0      0.0  ...  34.424926 -117.184503     28819.0\n","\n","[6163 rows x 9 columns]"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["# 嘗試只用 location.csv 預測答案（可以不用管這裡）"],"metadata":{"id":"AwfDE8CnasJl"}},{"cell_type":"code","source":["satisfaction = pd.read_csv('/content/drive/MyDrive/HTML final project/satisfaction.csv')\n","status = pd.read_csv('/content/drive/MyDrive/HTML final project/status.csv')\n","Train_IDs = pd.read_csv('/content/drive/MyDrive/HTML final project/Train_IDs.csv')\n","\n","# change string to value\n","status['Churn Category'].replace(['No Churn', 'Competitor', 'Dissatisfaction', 'Attitude', 'Price', 'Other'], [0, 1, 2, 3, 4, 5], inplace = True)\n","location.drop(['Population'], axis=1, inplace=True)\n","# data = pd.merge(pd.merge(satisfaction, location, on=\"Customer ID\"), status, on=\"Customer ID\")\n","data = pd.merge(status, location, on=\"Customer ID\")\n","training_data = pd.merge(data, Train_IDs, on=[\"Customer ID\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":398},"id":"gtZk-sNSKyMm","executionInfo":{"status":"error","timestamp":1641911362697,"user_tz":-480,"elapsed":326,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"456ff41c-09ce-4f6d-c5b1-602f6d18c7f7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-107-d55602e0f97b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# change string to value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Churn Category'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'No Churn'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Competitor'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Dissatisfaction'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Attitude'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Price'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Other'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mlocation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Population'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;31m# data = pd.merge(pd.merge(satisfaction, location, on=\"Customer ID\"), status, on=\"Customer ID\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Customer ID\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4172\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4173\u001b[0m             \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4174\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4175\u001b[0m         )\n\u001b[1;32m   4176\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   3887\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3888\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3889\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3891\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   3921\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3922\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3923\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3924\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3925\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   5285\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5286\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5287\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5288\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5289\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['Population'] not found in axis\""]}]},{"cell_type":"code","source":["training_data = training_data[training_data['Churn Category'] != 0] # Satisfaction Score < 3\n","print(training_data['Churn Category'].value_counts())\n","print(training_data.isna().sum())\n","# training_data\n","training_data.dropna(inplace=True)\n","x_train = training_data.iloc[:, 2:]\n","\n","print(x_train.columns)\n","# x_train = x_train.fillna(x_train.median())\n","x_train = x_train.to_numpy()\n","\n","y_train = training_data['Churn Category'].to_numpy()\n","\n","print(\"x_train.shape: \", x_train.shape)\n","print(\"y_train.shape: \", y_train.shape)\n","\n","y_train = y_train.astype('int')\n","y_train = np.where(y_train == 1, 1, -1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rrasgotJIYgz","executionInfo":{"status":"ok","timestamp":1641911831954,"user_tz":-480,"elapsed":314,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"ed7c06c7-daa7-4804-e666-db739f88d6ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1    364\n","3    159\n","2    128\n","4     95\n","5     91\n","Name: Churn Category, dtype: int64\n","Customer ID       0\n","Churn Category    0\n","Count             0\n","Country           0\n","State             0\n","City              0\n","Zip Code          0\n","Latitude          0\n","Longitude         0\n","dtype: int64\n","Index(['Count', 'Country', 'State', 'City', 'Zip Code', 'Latitude',\n","       'Longitude'],\n","      dtype='object')\n","x_train.shape:  (837, 7)\n","y_train.shape:  (837,)\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","x_val_train, x_val_test, y_val_train, y_val_test = train_test_split(x_train, y_train, test_size=0.2)\n","\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn import tree\n","DT = DecisionTreeClassifier()\n","val_clf = DT.fit(x_val_train, y_val_train)\n","\n","print(val_clf.feature_importances_)\n","tree.plot_tree(val_clf)\n","val_y_predicted = val_clf.predict(x_val_test)\n","val_acc = metrics.accuracy_score(y_val_test, val_y_predicted)\n","print(val_acc)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"RfIGkoszbzw5","executionInfo":{"status":"ok","timestamp":1641911851957,"user_tz":-480,"elapsed":12767,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"f01a952c-3c83-405a-bb86-633b6c106cb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.         0.         0.         0.2178871  0.22729663 0.30491836\n"," 0.24989791]\n","0.625\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Random forest"],"metadata":{"id":"76fWOjq2k9v3"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","x_val_train, x_val_test, y_val_train, y_val_test = train_test_split(x_train, y_train, test_size=0.2)\n","\n","# !pip install catboost\n","# from catboost import CatBoostClassifier\n","from xgboost.sklearn import XGBClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.svm import SVC\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import BaggingClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","\n","# CAT = CatBoostClassifier\n","MLP = MLPClassifier()\n","NB = GaussianNB()\n","QDA = QuadraticDiscriminantAnalysis()\n","SVCCC = SVC()\n","LR = LogisticRegression()\n","KNN = KNeighborsClassifier()\n","SGD = SGDClassifier()\n","ADA = AdaBoostClassifier()\n","DT = DecisionTreeClassifier()\n","RF = BaggingClassifier(DT)\n","XGB = XGBClassifier()\n","LGBM = LGBMClassifier()\n","GDB = GradientBoostingClassifier()\n","\n","clf_lst = [MLP, NB, QDA, SVCCC, LR, KNN, SGD, ADA, DT, RF, XGB, LGBM, GDB]\n","clf_lst_name = ['MLP', 'NB', 'QDA', 'SVCCC', 'LR', 'KNN', 'SGD', 'ADA', 'DT', 'RF', 'XGB', 'LGBM', 'GDB']\n","# clf_lst = [ADA, DT, XGB, LGBM, GDB]\n","val_acc_lst = []\n","\n","from sklearn.metrics import f1_score\n","for clf in clf_lst:\n","  val_clf = clf.fit(x_val_train, y_val_train)\n","  # print(f'{clf}: ', clf.feature_importances_)\n","  val_y_predicted = val_clf.predict(x_val_test)\n","  val_acc = metrics.f1_score(y_val_test, val_y_predicted, average='macro')\n","  val_acc_lst.append(val_acc)\n","  print(f'{clf} false: ')\n","  print(y_val_test[(y_val_test != val_y_predicted)])\n","  print(val_y_predicted[(y_val_test != val_y_predicted)])\n","  print(f'{clf} true: ')\n","  print(y_val_test[(y_val_test == val_y_predicted)])\n","  print()\n","\n","print()\n","print(\"acc:\")\n","for i in range(len(clf_lst)):\n","  print(f'{clf_lst_name[i]:}: {val_acc_lst[i]}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t4DjwqV5Jgn0","executionInfo":{"status":"ok","timestamp":1641911916752,"user_tz":-480,"elapsed":943,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"35b38885-bc61-48a0-c14a-5f87814d0a99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MLPClassifier() false: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","MLPClassifier() true: \n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","\n","GaussianNB() false: \n","[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1\n","  1  1 -1  1  1  1 -1  1  1  1  1  1  1 -1  1  1  1  1  1  1  1  1  1  1\n","  1  1  1  1 -1 -1  1  1  1  1  1 -1  1  1  1  1  1  1  1  1  1  1  1  1\n","  1]\n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1  1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1  1  1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1]\n","GaussianNB() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1\n"," -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1\n"," -1 -1 -1 -1 -1 -1  1 -1  1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","\n","QuadraticDiscriminantAnalysis() false: \n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1]\n","QuadraticDiscriminantAnalysis() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","\n","SVC() false: \n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1]\n","SVC() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","\n","LogisticRegression() false: \n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1]\n","LogisticRegression() true: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","\n","KNeighborsClassifier() false: \n","[ 1 -1 -1 -1 -1  1  1  1  1 -1  1 -1  1  1 -1 -1 -1  1 -1 -1  1 -1 -1 -1\n","  1  1 -1 -1 -1  1 -1  1  1 -1 -1 -1 -1  1  1 -1  1  1 -1  1  1  1 -1  1\n"," -1 -1  1 -1 -1 -1  1 -1  1  1  1  1 -1  1 -1  1  1 -1]\n","[-1  1  1  1  1 -1 -1 -1 -1  1 -1  1 -1 -1  1  1  1 -1  1  1 -1  1  1  1\n"," -1 -1  1  1  1 -1  1 -1 -1  1  1  1  1 -1 -1  1 -1 -1  1 -1 -1 -1  1 -1\n","  1  1 -1  1  1  1 -1  1 -1 -1 -1 -1  1 -1  1 -1 -1  1]\n","KNeighborsClassifier() true: \n","[-1  1  1 -1 -1 -1  1  1 -1 -1 -1 -1  1 -1 -1  1 -1 -1  1 -1  1 -1 -1  1\n"," -1  1  1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1 -1 -1 -1  1 -1 -1\n","  1 -1 -1  1  1 -1 -1 -1  1  1  1 -1  1 -1 -1 -1 -1  1 -1  1  1  1 -1 -1\n"," -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1  1 -1 -1 -1  1  1 -1 -1  1 -1  1 -1\n","  1 -1  1 -1  1 -1]\n","\n","SGDClassifier() false: \n","[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"," -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]\n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","SGDClassifier() true: \n","[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/discriminant_analysis.py:878: UserWarning: Variables are collinear\n","  warnings.warn(\"Variables are collinear\")\n","/usr/local/lib/python3.7/dist-packages/sklearn/discriminant_analysis.py:903: RuntimeWarning: divide by zero encountered in power\n","  X2 = np.dot(Xm, R * (S ** (-0.5)))\n","/usr/local/lib/python3.7/dist-packages/sklearn/discriminant_analysis.py:903: RuntimeWarning: invalid value encountered in multiply\n","  X2 = np.dot(Xm, R * (S ** (-0.5)))\n","/usr/local/lib/python3.7/dist-packages/sklearn/discriminant_analysis.py:906: RuntimeWarning: divide by zero encountered in log\n","  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])\n"]},{"output_type":"stream","name":"stdout","text":["AdaBoostClassifier() false: \n","[ 1 -1  1 -1  1  1  1  1  1  1 -1  1  1  1  1  1  1 -1  1 -1  1  1  1 -1\n"," -1 -1  1  1 -1 -1 -1  1  1 -1 -1  1  1 -1 -1  1  1  1 -1 -1  1  1 -1  1\n"," -1  1  1  1 -1  1  1  1  1  1  1  1  1  1  1 -1]\n","[-1  1 -1  1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1  1 -1  1 -1 -1 -1  1\n","  1  1 -1 -1  1  1  1 -1 -1  1  1 -1 -1  1  1 -1 -1 -1  1  1 -1 -1  1 -1\n","  1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1]\n","AdaBoostClassifier() true: \n","[-1 -1 -1  1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1 -1  1\n"," -1 -1 -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1  1 -1 -1 -1  1\n","  1 -1  1 -1  1 -1 -1 -1 -1  1  1  1 -1 -1  1 -1 -1  1 -1  1  1  1 -1 -1\n"," -1 -1  1 -1 -1 -1 -1 -1 -1  1 -1 -1  1  1 -1 -1 -1 -1 -1  1  1 -1 -1 -1\n","  1 -1  1 -1 -1 -1  1 -1]\n","\n","DecisionTreeClassifier() false: \n","[ 1 -1 -1 -1 -1  1  1  1 -1 -1  1  1  1 -1  1  1 -1 -1 -1  1 -1 -1 -1  1\n"," -1 -1  1 -1 -1 -1  1  1  1 -1 -1  1  1  1  1  1  1 -1 -1  1 -1  1  1 -1\n"," -1  1 -1 -1  1  1  1  1 -1  1  1 -1  1  1  1 -1]\n","[-1  1  1  1  1 -1 -1 -1  1  1 -1 -1 -1  1 -1 -1  1  1  1 -1  1  1  1 -1\n","  1  1 -1  1  1  1 -1 -1 -1  1  1 -1 -1 -1 -1 -1 -1  1  1 -1  1 -1 -1  1\n","  1 -1  1  1 -1 -1 -1 -1  1 -1 -1  1 -1 -1 -1  1]\n","DecisionTreeClassifier() true: \n","[-1 -1  1  1 -1  1 -1  1 -1 -1 -1  1 -1  1 -1 -1  1 -1 -1  1  1 -1 -1 -1\n","  1 -1 -1 -1  1 -1 -1  1 -1 -1  1 -1 -1  1 -1  1 -1 -1  1 -1 -1  1 -1  1\n"," -1 -1 -1  1 -1  1 -1 -1 -1 -1 -1  1  1 -1  1 -1 -1 -1  1  1  1  1 -1 -1\n"," -1 -1  1 -1 -1 -1 -1  1 -1 -1  1  1  1 -1 -1  1 -1  1 -1 -1 -1  1  1 -1\n"," -1  1 -1  1 -1 -1  1 -1]\n","\n","BaggingClassifier(base_estimator=DecisionTreeClassifier()) false: \n","[ 1 -1 -1 -1  1  1  1  1 -1 -1  1 -1  1  1 -1 -1 -1  1 -1 -1 -1  1 -1 -1\n","  1  1 -1 -1  1 -1  1 -1 -1  1  1  1  1  1 -1  1  1 -1 -1 -1  1 -1 -1  1\n","  1  1  1  1 -1  1  1  1 -1]\n","[-1  1  1  1 -1 -1 -1 -1  1  1 -1  1 -1 -1  1  1  1 -1  1  1  1 -1  1  1\n"," -1 -1  1  1 -1  1 -1  1  1 -1 -1 -1 -1 -1  1 -1 -1  1  1  1 -1  1  1 -1\n"," -1 -1 -1 -1  1 -1 -1 -1  1]\n","BaggingClassifier(base_estimator=DecisionTreeClassifier()) true: \n","[-1 -1  1  1 -1  1 -1 -1  1  1 -1 -1 -1 -1 -1 -1  1 -1  1 -1  1 -1 -1  1\n"," -1  1  1 -1 -1 -1  1 -1 -1  1 -1 -1 -1  1  1 -1 -1  1 -1 -1  1 -1 -1 -1\n","  1 -1 -1  1 -1  1 -1  1 -1 -1 -1 -1 -1  1  1 -1  1 -1 -1  1 -1 -1  1 -1\n","  1  1  1  1 -1 -1 -1 -1  1 -1 -1 -1  1  1 -1 -1  1  1 -1 -1  1  1 -1 -1\n"," -1 -1  1  1 -1 -1  1 -1  1 -1  1 -1 -1  1 -1]\n","\n","XGBClassifier() false: \n","[ 1 -1 -1  1  1  1  1 -1  1  1  1  1  1 -1 -1 -1  1 -1  1  1 -1 -1  1  1\n"," -1 -1 -1  1 -1  1  1 -1 -1  1  1 -1  1  1  1  1 -1  1  1 -1 -1  1  1  1\n"," -1  1  1  1  1  1  1 -1  1  1  1 -1]\n","[-1  1  1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1  1  1  1 -1  1 -1 -1  1  1 -1 -1\n","  1  1  1 -1  1 -1 -1  1  1 -1 -1  1 -1 -1 -1 -1  1 -1 -1  1  1 -1 -1 -1\n","  1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1  1]\n","XGBClassifier() true: \n","[-1 -1 -1  1  1 -1 -1 -1  1  1 -1 -1 -1 -1  1 -1 -1  1 -1 -1  1 -1 -1 -1\n"," -1  1 -1  1 -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1  1  1 -1 -1 -1 -1 -1  1 -1\n"," -1 -1  1 -1  1 -1  1 -1 -1 -1 -1 -1 -1  1  1 -1 -1  1 -1 -1  1 -1  1  1\n","  1  1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1  1 -1 -1  1  1 -1  1 -1 -1 -1 -1\n","  1  1 -1 -1 -1  1 -1  1 -1 -1  1 -1]\n","\n","LGBMClassifier() false: \n","[ 1 -1 -1 -1  1  1 -1 -1  1 -1  1  1  1 -1 -1 -1  1 -1  1  1 -1  1  1 -1\n"," -1 -1  1 -1  1  1  1 -1 -1  1  1 -1  1  1  1 -1 -1  1  1 -1 -1  1 -1  1\n","  1 -1 -1  1  1  1  1  1 -1  1  1  1 -1  1]\n","[-1  1  1  1 -1 -1  1  1 -1  1 -1 -1 -1  1  1  1 -1  1 -1 -1  1 -1 -1  1\n","  1  1 -1  1 -1 -1 -1  1  1 -1 -1  1 -1 -1 -1  1  1 -1 -1  1  1 -1  1 -1\n"," -1  1  1 -1 -1 -1 -1 -1  1 -1 -1 -1  1 -1]\n","LGBMClassifier() true: \n","[-1 -1  1  1 -1  1 -1 -1  1  1 -1 -1 -1  1 -1  1 -1 -1  1 -1 -1  1 -1  1\n"," -1  1 -1  1 -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1  1\n"," -1 -1 -1  1 -1 -1  1 -1 -1 -1 -1 -1  1  1  1 -1 -1  1 -1 -1  1 -1  1  1\n","  1  1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1  1 -1 -1  1  1  1 -1 -1 -1 -1  1  1\n"," -1 -1  1  1 -1 -1  1 -1 -1 -1]\n","\n","GradientBoostingClassifier() false: \n","[-1  1 -1 -1  1 -1  1  1  1  1  1  1 -1  1  1  1  1  1  1 -1 -1 -1  1 -1\n","  1  1 -1 -1  1  1 -1 -1  1  1  1 -1 -1  1  1  1  1  1  1  1  1  1  1 -1\n"," -1  1 -1  1  1  1  1  1  1  1  1 -1  1  1]\n","[ 1 -1  1  1 -1  1 -1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1 -1 -1  1  1  1 -1  1\n"," -1 -1  1  1 -1 -1  1  1 -1 -1 -1  1  1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  1\n","  1 -1  1 -1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1]\n","GradientBoostingClassifier() true: \n","[-1  1 -1 -1 -1 -1 -1 -1 -1  1 -1 -1  1 -1 -1  1 -1 -1 -1 -1 -1  1 -1 -1\n"," -1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1 -1 -1 -1 -1  1 -1 -1 -1 -1  1 -1 -1\n","  1 -1  1 -1 -1 -1 -1 -1 -1 -1  1 -1  1 -1 -1 -1 -1 -1  1  1  1  1 -1 -1\n"," -1 -1  1 -1 -1 -1 -1 -1  1 -1 -1  1  1 -1 -1  1 -1 -1 -1 -1  1  1 -1 -1\n"," -1  1 -1  1 -1  1 -1 -1  1 -1]\n","\n","\n","acc:\n","MLP: 0.3029045643153527\n","NB: 0.42516990860089054\n","QDA: 0.3612167300380228\n","SVCCC: 0.3612167300380228\n","LR: 0.3612167300380228\n","KNN: 0.60149511213341\n","SGD: 0.3029045643153527\n","ADA: 0.5909920876445527\n","DT: 0.6096994337156962\n","RF: 0.6530309069169173\n","XGB: 0.6235997012696042\n","LGBM: 0.6187966622749231\n","GDB: 0.6010418262601501\n"]}]},{"cell_type":"code","source":["300/1409"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FnGwzU_9LBI3","executionInfo":{"status":"ok","timestamp":1641911066388,"user_tz":-480,"elapsed":412,"user":{"displayName":"黃柏維","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11052031743181350235"}},"outputId":"dbf8f2cb-3a38-488f-cbc3-1ac5009e82c6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.21291696238466998"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":[""],"metadata":{"id":"pWy4HxlXhptF"},"execution_count":null,"outputs":[]}]}